// warning: don't modify outside of UI/res/base/ as a build will write over your changes!

str.defaultEM = 13
str.color = #D2D2D2 // your regular text color
str.colorDisabled = #888888
str.defaultFont = "Arial"
text.bgSel = #df264C99
stext.keys.copy = { "ctrl+c" "shift+ctrl+c" }

icon.color = #CCC
open.file = "xdg-open" // will be invoked with one argument of the path
open.terminal = "x-terminal-emulator" // will be invoked in the directory to be opened in
open.link = java // java, xdg; "java" uses java.awt.Desktop::browse, xdg invokes xdg-open

bg.back   = #18181B
bg.middle = #27272A
bg.header = #242427
bg.bg1  = #1C1C1F // alternate row colors
bg.bg2  = bg.back // â†‘
bg.sel  = #214283 // selected text color
bg.selU = #404040 // selected text color while unfocused

scroll.globalSpeed = 0.8 // global scrolling speed multiplier
scroll.nodeSpeed = 1 // speed multiplier in scroll nodes (in addition to scroll.globalSpeed)
scroll.reduceSpeedAt = 10em // if scrolling in a node below this size, scroll proportionally slower (e.g. with the default value of 10em, vertically scrolling in a 2em-high node will be 5x slower)
scroll.barCol   = #333 // background color of scrollbar
scroll.thumbCol = #666 // main color
scroll.barSize  = 1em  // width
scroll.smooth = .5 // smoothness, 0..1; smaller - faster; bigger - slower
scroll.keys {
  toXYs = { "home" "ctrl+home" } // scroll vertically & horizontally to the start
  toXYe = { } // scroll vertically & horizontally to the end
  toYs = { } // ... axis-separate components of the above
  toXs = { }
  toXe = { }
  toYe = { "end" "ctrl+end" }
}

uw.handleWidth = 0.3em
uw.pad = 0.1em
uw.padCol = #111

partialMenu.menu = menu {}
partialMenu.sep = vsep {}
tabbed.minWidth = 10em
tabbed.padL = 0.4em
tabbed.padR = 1.1em
tabbed.padU = 0.3em
tabbed.padD = 0.3em
tabbed.bgOff = #3C3D37
tabbed.bgOn = #282923
tabbed.radius = 0.2em
tabbed.barBg = #484944
tabbed.bar = scroll { y=off x=hidden $list { dir=h mode=drag } }

tabbed.dragOutMinDist = 5em // minimum distance required to drag a tab outside of its original holder for it to consider changing holder
tabbed.splitMenu = {
  mi { id=base_splitR "Split right" key=tabbed.keys.splitR }
  mi { id=base_splitL "Split left" key=tabbed.keys.splitL }
  mi { id=base_splitU "Split up" key=tabbed.keys.splitU }
  mi { id=base_splitD "Split down" key=tabbed.keys.splitD }
}
tabbed.barMenu {
  addGroup = { mi { id=addGroup "Add group" key=tabbed.keys.group } }
  unwrap = { mi { id=unwrap "Unwrap group" key=tabbed.keys.unwrap } }
}
tabbed.group.defaultName = "group"
tabbed.group.delete = { mi { id=remove "Remove" key=tabbed.keys.remove } }
tabbed.hideBar   = { mi { id=base_hideBar "Hide bar" } }
tabbed.unhideBar = { mi { id=base_unhideBar "Unhide bar" } }
tabbed.splitMenu.merge = { mi { id=base_merge "Merge" key=tabbed.keys.merge } }
tabbed.splitMenu.unhideAdj = { mi { id=base_unhideAdj "Unhide adjacent bars" } }
tabbed.splitMenu.wrapInGroup = { mi { id=base_wrapInGroup "Wrap in group" key=tabbed.keys.group } }
tabbed.keys {
  splitR = { "right" }
  splitD = { "down" }
  splitL = { "left" }
  splitU = { "up" }
  merge = { "m" }
  group = { "g" }
  hideBar = { "h" }
  unwrap = { "x" }
  remove = { "x" }
}

menu {
  genericExit = { "esc" }
  bg = bg.middle // background color of menus
  hover = bg.sel // color of hovered over item
  minWidth = 15em
  padL = 1.5em // padding of separate menu items
  padR = .6em
  padY = .2em
  wholePadY = .3em // padding of whole menu
  keybindSize = 0.8em
  
  rightClickImplicitClick {
    enabled = true // whether to enable implicitly selecting a right-click menu item on release of a right-click drag, if all the following conditions are satisfied: 
    minDist = 1em // minimum distance the mouse must have been moved
    minTime = 0.2 // minimum time before release, in seconds
  }
  shadowBlur = 0.6em
  shadowSpread = 0.1em
  shadowColor = #7f000000
  keys {
    exit = menu.genericExit
    prev = { "up" }
    next = { "down" }
    accept = { "tab" "space" "enter" }
  }
  
  menuField = pad { y=menu.padY x=menu.padR
    scroll { y=off x=hidden menufield { id=name family=str.defaultFont bg=#333 } }
  }
}

tree.bg1 = bg.bg1
tree.bg2 = bg.bg2

table.bg1 = bg.bg1
table.bg2 = bg.bg2
table.bgH = bg.header

hsep.color = #424244
hsep.x = .2em
hsep.y = .3em
hsep.w = .05em
vsep.x = hsep.y
vsep.y = hsep.x
vsep.h = hsep.w
vsep.color = hsep.color

btn {
  style = round // options: round, rect
  
  rect.bg = #444449
  rect.borderRadius = .15em
  rect.borderL = #4b4b4f
  rect.borderD = #000000
  
  round.bgOff = #0000
  round.bgHover = #3C3C3E
  round.bgOn = #4F4F50
  round.radius = .2em
  
  padX = .3em
  padY = .1em
}

checkbox {
  size = 1em
  colOff = #545454
  colHover = #5E5E5E
  colOn = #4772B3
  borderCol = #4E4E4E
  borderW = .05em
  round = .15em
  path = "M0.201,0.536L0.267,0.471L0.423,0.623L0.771,0.226L0.847,0.291L0.423,0.762"
  pathCol = #EEE
}

radio {
  size = checkbox.size
  dotSize = 0.2em
  dotCol = checkbox.pathCol
  colOff = checkbox.colOff
  colHover = checkbox.colHover
  colOn = checkbox.colOn
  borderColOff = checkbox.borderCol
  borderColOn  = checkbox.borderCol
  borderW = checkbox.borderW
}

codearea.lnCol = str.colorDisabled
codearea.lnBg = #0000

textarea {
  tsz = 1em
  bgSel = bg.sel
  bgSelU = bg.selU
  keys {
    keepFirst = { "escape" } // keep only first cursor, or cancel selection
    keepLast = { "shift+escape" } // keep only last cursor, or cancel selection, going to original position
    copy = { "ctrl+c" "shift+ctrl+c" }
    paste = { "ctrl+v" }
    cut = { "ctrl+x" }
    undo = { "ctrl+z" }
    redo = { "ctrl+y" "ctrl+shift+z" }
    selectAll = { "ctrl+a" }
  }
}
codearea {
  wrapPairs = "()[]{}\"\"''``"
  keys {
    deleteLineBack = { "alt+backspace" }
    deleteLineNext = { "alt+delete" }
    cursorDown = { "alt+shift+down" }
    cursorUp = { "alt+shift+up" }
    indentInc = { "tab" }
    indentDec = { "shift+tab" }
    selectNext = { "ctrl+d" }
    selectLines = { "ctrl+l" }
    duplicateSelection = { "ctrl+shift+d" }
    align = { "ctrl+shift+a" }
  }
}

textfield.bg = bg.middle
textfield.padX = .2em
textfield.padY = .2em
textfield.radius = .2em

colorpicker {
  borderCol = #666
  borderW = 0.07em
  sz = 1.4em
  full = pad { bg=bg.back all=.3em }
  
  fullUI = v { w=15em h=24em
    vl { pad=.2em
      v { id=boardPlace pad=.2em }
      h { pad=1em alX=center btn{"RGB"} btn{"HSV"} }
      v { id=sliders }
    }
  }
  rgbSliders = {
    h { alY=center "R " slider{} }
    h { alY=center "G " slider{} }
    h { alY=center "B " slider{} }
  }
  keys {
    exit = menu.genericExit
  }
}

devtools {
  ui = v {
    h { h=min bg=bg.header pad=0.2em // TODO move some of these buttons to a more debuggy place
      btn { style=rect "pick" id=pick }
      btn { style=rect "inline" id=hlInline }
      btn { style=rect "dbgRedraw" id=dbgRedraw }
      btn { style=rect "GC" id=gc }
      btn { style=rect "frame" id=requestFrame }
      btn { style=rect "reset tree state" id=resetTreeState }
      btn { style=rect "ExternalField stats" id=extFldStats }
    }
    
    scroll { tempOverlap=true bg=bg.back
      tree {
        id=main
      }
    }
    
    h {
      h=1em bg=bg.middle
      scroll { x=hidden y=off id=pathScroll
        pad { x=1em id=path family="DejaVu Sans Mono" "" }
      }
    }
    
    h {
      scroll { tempOverlap=true bg=bg.back
        pad { all=.5em
          v {
            v { id=infoC family="DejaVu Sans Mono" }
            dtgraph { id=graph }
          }
        }
      }
      hsep{ x=0px y=0px }
      scroll { tempOverlap=true bg=bg.back
        table { id=infoT clip=true }
      }
    }
    
    pad { x=1em bg=bg.middle
      h {
        h=1em
        scroll { x=hidden y=off h { id=infoL } }
        scroll { x=hidden y=off h { id=infoR alX=right } }
      }
    }
  }
  
  row = tr {
    pad { id=k l=.5em y=.1em family="DejaVu Sans Mono" }
    pad { id=v r=.5em y=.1em family="DejaVu Sans Mono" }
  }
  
  graph {
    lineCol = #40808080
    
    eventCol = #A0ff8080
    tickCol  = #A080ff80
    drawCol  = #A08080ff
    flushCol = #4080A080
    frameCol = #408080A0
  }
  memUsed = #28282B
  memFree = #151518
}